plugins {
    id 'java'
    id 'idea'
    id 'com.google.protobuf' version '0.8.17'
    id 'application'
}

description = 'Review Service'
group = "reviewservice"
version = "0.1.0-SNAPSHOT"

ext {
    speed = project.hasProperty('speed') ? project.getProperty('speed') : false
    offlineCompile = new File("$buildDir/output/lib")
}

dependencies {
    if (speed) {
        implementation fileTree(dir: offlineCompile, include: '*.jar')
    } else {
        implementation 'org.slf4j:slf4j-api:1.7.36'
        implementation 'org.slf4j:slf4j-log4j12:1.7.36'
        implementation 'org.apache.logging.log4j:log4j-core:2.17.1'
        implementation 'junit:junit:4.13.1'
        testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
        runtimeOnly 'io.grpc:grpc-netty-shaded:1.44.0'
        implementation 'io.grpc:grpc-protobuf:1.44.0'
        implementation 'io.grpc:grpc-stub:1.44.0'
        implementation 'io.grpc:grpc-services:1.44.0'
        compileOnly 'org.apache.tomcat:annotations-api:6.0.53'
        implementation 'org.mongodb:mongodb-driver-sync:4.1.1'
        //TODO: Check if the usage of "Implementation" is really correct here!
    }
}

test {
    useJUnitPlatform()
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.19.2"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.44.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
        ofSourceSet('main')
    }
}

sourceSets {
    main {
        java {
            srcDirs 'hipstershop'
            srcDirs 'build/generated/source/proto/main/java/hipstershop'
            srcDirs 'build/generated/source/proto/main/grpc/hipstershop'
        }
    }
}

startScripts.enabled = false

//taken from AdService
task downloadRepos(type: Copy) {
    //had to edit this to make it work
    from configurations.runtimeClasspath
    into offlineCompile
}

task reviewService(type: CreateStartScripts) {
    mainClassName('hipstershop.ReviewService')
    applicationName('ReviewService')
    outputDir(new File(project.buildDir, 'tmp'))
    classpath = startScripts.classpath
    //Look into default JVM options for logging
}

task reviewServiceClient(type: CreateStartScripts) {
    mainClassName('hipstershop.ReviewServiceClient')
    applicationName('ReviewServiceClient')
    outputDir(new File(project.buildDir, 'tmp'))
    classpath = startScripts.classpath
    //Look into default JVM options for logging
}

applicationDistribution.into('bin') {
    from(reviewService)
    from(reviewServiceClient)
    fileMode = 0755
}

repositories {
    mavenCentral()
}